package {		import flash.events.*;	import flash.display.*;	import flash.media.*;	import flash.text.*;	import flash.system.*;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.media.Sound;	import flash.net.URLRequest;	import flash.geom.*;	import Debug;	import SoundPlayer;	import UtilEvent;		// TIMER	import flash.utils.Timer;	import flash.events.TimerEvent;		import XMLload;		//BUTTONS	import BtnClose;	import BtnReload;		public class Player extends MovieClip 	{		//--------------------------------------//  PRIVATE VARIABLES//--------------------------------------				private var nc:NetConnection;		private var ns:NetStream;		private var ns2:NetStream;		private var ns3:NetStream;		private var ns4:NetStream;		private var counterNS:int;				private var client:Object;		private var meta:Object;		public static var vid: Video;		public static var vid2: Video;		public static var vid3: Video;		public static var vid4: Video;		private var vidContainer:MovieClip = new MovieClip();		private var _stage:Stage = stage;				//BUTTONS		private var btn_close:BtnClose = new BtnClose();		private var btn_reload:BtnReload = new BtnReload();		private var btn_pause:btnPause = new btnPause();		private var btn_stop:btnStop = new btnStop();		private var btn_playPlayer:btnPlayPlayer = new btnPlayPlayer();		private var btn_pausePlayer:btnPausePlayer = new btnPausePlayer();		private var btn_invisiblePauseToggle:btnInvisiblePauseToggle = new btnInvisiblePauseToggle();		private var btn_volume_on:btnVolumeOn = new btnVolumeOn();		private var btn_volume_off:btnVolumeOff = new btnVolumeOff();		private var bg_player_small:bgPlayerSmall = new bgPlayerSmall();		private var bg_player_big:bgPlayerBig = new bgPlayerBig();		private var addHeight:int = 0;				private var bPause:Boolean = true;		private var bVolume:Boolean = true;						// Elements for DebugMode		private var metaInfo:TextField = new TextField();		private var debug:Debug = new Debug();		private var debugArray:Array;				private var playList:Array;		//sound: private var soundList:Array;				private var genre:String;					///////SETTINGS//////////////////////////		private var DEBUG:Boolean = false;		private var PRESENTATION:Boolean = false;		private var lautstaerke:Number = 1.0;		/////////////////////////////////////////				//sound: private var soundMusic:SoundPlayer;				private var playBool:Boolean;		private var bNextSound:Boolean = true;			//TIMER		//Initialize Timer for Utils.genre == meat		var myTimer:Timer = new Timer(Utils._time, 1);		//var errorTimer = new Timer(500, 1); // not used yet				private var xmlLoad:XMLload = new XMLload();				//FOR CHECKING IF CERTAIN FILE EXISTS BEFORE PLAYING IT		private var checkFile:FileLoaderUtils = new FileLoaderUtils();		//--------------------------------------//  CONSTRUCTOR//--------------------------------------				public function Player():void 		{			build();		}		//--------------------------------------//  PUBLIC METHODS//--------------------------------------		public function startVideo(_playList:Array):void		{			//sound: soundMusic = new SoundPlayer();			playList = _playList;			//sound: soundList = MetaDating.SoundList; // übergebe sound array von mainclass an player function						trace("asa: " + soundList[0])						if(Utils.genre == "project_name")			{				standardVidSetup();				//setVideo(VIDEO_WIDTH_DEMO, VIDEO_HEIGHT_DEMO);			}						checkFile.addEventListener(UtilEvent.FILE_NOT_FOUND, fileNotFound);						//prepare netStream and preBuffer			vid.attachNetStream(ns); //verteile die geöffneten streams auf videoObjects			vid2.attachNetStream(ns2);			vid3.attachNetStream(ns3);			vid4.attachNetStream(ns4);			ns.play("media/"+ Utils.genre +"/"+ playList[0]); // Start first Video in Array			ns2.play("media/"+ Utils.genre +"/"+ playList[1]); // prebuffer second video			ns3.play("media/"+ Utils.genre +"/"+ playList[2]); // prebuffer thirth video			ns4.play("media/"+ Utils.genre +"/"+ playList[3]); // prebuffer fourth video			ns2.pause();			ns3.pause();			ns4.pause();						addChild(vidContainer);			vidContainer.addChild(vid);			vidContainer.addChild(vid2);			vidContainer.addChild(vid3);			vidContainer.addChild(vid4);						vid.alpha = 1;			vid2.alpha = 0;			vid3.alpha = 0;			vid4.alpha = 0;						//sound: soundMusic.playSound(soundList[Utils.idx], lautstaerke);			//end of buffer prepare						if(Utils.toggleDebug) debug.drawRect(vidContainer, 10, 10, 280, 680, 0xFFFFFF, .5); // draw Background for debug text					//close Button			var btnClosePoint:Point = new Point(1200, 30);			btn_close.x = 1200;			btn_close.y = 30;			btn_close.alpha = .75;			vidContainer.addChild(btn_close);			btn_close.addEventListener(MouseEvent.CLICK, stopVideo);						//reload Button			btn_reload.x = vid.width - btn_pausePlayer.height;			btn_reload.y = vid.height - btn_pausePlayer.height;			vidContainer.addChild(btn_reload);			btn_reload.addEventListener(MouseEvent.CLICK, reloadVideo);						//backround player controll			bg_player_big.x = 0 + (btn_pausePlayer.width*3);			bg_player_big.y = vid.height - btn_pausePlayer.height;			vidContainer.addChild(bg_player_big);			//Pause / Play Button			btn_pausePlayer.x = 0			btn_pausePlayer.y = vid.height - btn_pausePlayer.height ;			vidContainer.addChild(btn_pausePlayer);			btn_pausePlayer.addEventListener(MouseEvent.CLICK, togglePause);						//Invisible Pause Button (overlay)			btn_invisiblePauseToggle.x = 0;			btn_invisiblePauseToggle.y = 0;			btn_invisiblePauseToggle.height = vid.height - btn_pausePlayer.height;			btn_invisiblePauseToggle.width = vid.width;			vidContainer.addChild(btn_invisiblePauseToggle);			btn_invisiblePauseToggle.addEventListener(MouseEvent.CLICK, togglePause);						//mute button			btn_volume_on.x = 0 + (btn_pausePlayer.width*2);			btn_volume_on.y = vid.height - btn_pausePlayer.height;			vidContainer.addChild(btn_volume_on);			btn_volume_on.addEventListener(MouseEvent.CLICK, toggleVolume);						//stopButton			btn_stop.x =   0 + btn_pausePlayer.width;			btn_stop.y = vid.height - btn_pausePlayer.height;			vidContainer.addChild(btn_stop);			btn_stop.addEventListener(MouseEvent.CLICK, stopEverything);						//check if mute is active and deactivate it  --> just in case restart with mute == on!			if (bVolume == false){				vidContainer.removeChild(btn_volume_off);				bVolume = true;				SoundMixer.soundTransform = new SoundTransform(1);								}		}		//--------------------------------------				public function stopVideo(e:MouseEvent = null):void		{			//speechAdvert.stopSound();			killSound();			//if(PRESENTATION) presentation.togglePresentation = true;			myTimer.stop();			vid.clear();			vid2.clear();			vid3.clear();			vid4.clear();								switch (counterNS)					{						case 0:							ns.pause(); // stay paused when previous clip was paused							ns.close();						break;						case 1:							ns2.pause(); // stay paused when previous clip was paused							ns2.close();						break;						case 2:							ns3.pause(); // stay paused when previous clip was paused							ns3.close();						break;						case 3:							ns4.pause(); // stay paused when previous clip was paused							ns4.close();						break;					}								if(Utils.toggleDebug)				debug.clearInfo(vidContainer);			stage.fullScreenSourceRect = null;			removeChild(vidContainer);			Utils.idx = 0;			counterNS = 0;		}	//--------------------------------------/////not ready!				public function stopEverything(e:MouseEvent = null):void		{			stopVideo();						MetaDating.endOfVideo();		}//--------------------------------------				public function togglePause(e:MouseEvent = null):void		{							if(bPause)			{				vidContainer.removeChild(btn_pausePlayer);								btn_playPlayer.x= 0;				btn_playPlayer.y= vid.height - btn_pausePlayer.height;							btn_pause.x = 0;				btn_pause.y = 0;				btn_pause.width = vid.width;				btn_pause.height = vid.height - btn_pausePlayer.height;								//ns.pause();					switch (counterNS)					{						case 0:							ns.pause(); // stay paused when previous clip was paused						break;						case 1:							ns2.pause(); // stay paused when previous clip was paused						break;						case 2:							ns3.pause(); // stay paused when previous clip was paused						break;						case 3:							ns4.pause(); // stay paused when previous clip was paused						break;					}									trace("pause");				bPause = false;				vidContainer.addChild(btn_pause);				vidContainer.addChild(btn_playPlayer);				btn_playPlayer.addEventListener(MouseEvent.CLICK, togglePause);				btn_pause.addEventListener(MouseEvent.CLICK, togglePause);			}			else			{					switch (counterNS)					{						case 0:							ns.resume(); // stay paused when previous clip was paused						break;						case 1:							ns2.resume(); // stay paused when previous clip was paused						break;						case 2:							ns3.resume(); // stay paused when previous clip was paused						break;						case 3:							ns4.resume(); // stay paused when previous clip was paused						break;					}									trace("play");				bPause = true;				vidContainer.removeChild(btn_pause);				vidContainer.removeChild(btn_playPlayer);				vidContainer.addChild(btn_pausePlayer);				//vidContainer.setChildIndex(btn_pausePlayer, 2);				//vidContainer.setChildIndex(btn_invisiblePauseToggle, 5);			}		}		//--------------------------------------		public function toggleVolume(e:MouseEvent = null):void		{				if(bVolume)			{				btn_volume_off.x = 0 + (btn_pausePlayer.width*2);				btn_volume_off.y = vid.height - btn_pausePlayer.height;				trace("volume off");				bVolume = false;				vidContainer.addChild(btn_volume_off);				btn_volume_off.addEventListener(MouseEvent.CLICK, toggleVolume);				vidContainer.removeChild(btn_volume_on);				SoundMixer.soundTransform = new SoundTransform(0);							}			else			{				trace("volume on");				bVolume = true;				vidContainer.addChild(btn_volume_on);				vidContainer.removeChild(btn_volume_off);				SoundMixer.soundTransform = new SoundTransform(1);			}		}		//--------------------------------------				//function to play the current clip again from the beginning		public function repeatVid(e:MouseEvent = null):void		{			trace("repeat");			Utils.idx--;			ns.play(Utils.genre + "/" + playList[Utils.idx]);		}		//--------------------------------------				public function previousVid(e:MouseEvent = null):void		{			trace("previous Video");			if(Utils.idx != 0)			{				Utils.idx-= 2; // go 1 clip back. 2 because idx iterates with every play				ns.play(Utils.genre +"/" + playList[Utils.idx]);			}		}		//--------------------------------------						public function nextVid(e:MouseEvent = null):void		{						Utils.idx++;			if(counterNS <= 2) //zählt den NetStream Counter hoch damit flash weiß welcher stream als nächstes vorgeladen werden soll (=3)			{				counterNS++;			}			else{counterNS = 0;}						//trace("counterNS: " + counterNS);			trace("IDX " + Utils.idx);			trace("next Video");			//checkFile.doesFileExist("media/" + Utils.genre + "/" + playList[Utils.idx]); // check if file exists before you play it. It would make more sense to check all files at once but program gets stuck if you check  more than 20.			if(Utils.idx >= playList.length)			{					stopVideo();					killSound();					trace("video and sound stopped");					MetaDating.endOfVideo();			}			else			{				//PLAY NEXT SOUND				//sound: soundMusic.stopSound();					//sound: soundMusic = new SoundPlayer();				//sound: soundMusic.playSound(soundList[Utils.idx], lautstaerke);								switch (counterNS) //switch case für Counter (0 bis 3)				{					case 0:						if(playList.length - (Utils.idx + 3) > 0) //schaut nach ob überhaupt noch videoclips in der aktuellen playlist sind						{							ns4.play("media/"+ Utils.genre +"/"+ playList[Utils.idx+3]); // Prepare next stream							ns4.pause();							//trace("prepare next stream yo");							//trace("prepare video: " + playList[Utils.idx+3]);						}						trace("counterNS 0: " + counterNS);						vid.alpha = 1;						vid4.alpha = 0;						ns.resume(); //starte netStream					break;										case 1:						if(playList.length - (Utils.idx + 3) > 0)						{							ns.play("media/"+ Utils.genre +"/"+ playList[Utils.idx+3]); // Prepare next stream							ns.pause();							//trace("prepare next stream yo");							//trace("prepare video: " + playList[Utils.idx+3]);						}						trace("counterNS 1: " + counterNS);						vid.alpha = 0;						vid2.alpha = 1;						ns2.resume();					break;										case 2:						if(playList.length - (Utils.idx + 3) > 0)						{							ns2.play("media/"+ Utils.genre +"/"+ playList[Utils.idx+3]); // Prepare next stream							ns2.pause();							//trace("prepare next stream yo");							//trace("prepare video: " + playList[Utils.idx+3]);						}						trace("counterNS 2: " + counterNS);						vid2.alpha = 0;						vid3.alpha = 1;						ns3.resume();					break;					case 3:						if(playList.length - (Utils.idx + 3) > 0)						{							ns3.play("media/"+ Utils.genre +"/"+ playList[Utils.idx+3]); // Prepare next stream							ns3.pause();							//trace("prepare next stream yo");							//trace("prepare video: " + playList[Utils.idx+3]);						}						trace("counterNS 3: " + counterNS);						vid3.alpha = 0;						vid4.alpha = 1;						ns4.resume();					break;				}								if (bPause == false)				{					switch (Utils.idx)					{						case 0:							ns.pause(); // stay paused when previous clip was paused						break;						case 1:							ns2.pause(); // stay paused when previous clip was paused						break;						case 2:							ns3.pause(); // stay paused when previous clip was paused						break;						case 3:							ns4.pause(); // stay paused when previous clip was paused						break;					}				}										}				}		//--------------------------------------				public function killAllSound():void		{					}		//--------------------------------------//  PRIVATE & PROTECTED INSTANCE METHODS//--------------------------------------				private function build() : void 		{			vid = new Video();			vid2 = new Video();			vid3 = new Video();			vid4 = new Video();			Utils.idx = 0;			counterNS = 0;			client = new Object();			client.onMetaData = metadataHandler;							nc = new NetConnection();			nc.connect(null);					ns = new NetStream(nc);			ns2 = new NetStream(nc);			ns3 = new NetStream(nc);			ns4 = new NetStream(nc);			ns.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);			ns.client = client;			ns2.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);			ns2.client = client;			ns3.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);			ns3.client = client;			ns4.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);			ns4.client = client;											// EVENT HANDLERS			//vidContainer.addEventListener(MouseEvent.CLICK, togglePause);			//vidContainer.addEventListener(MouseEvent.CLICK, removeRect);					}		//--------------------------------------				private function metadataHandler(metadataObj:Object):void 		{			meta = metadataObj;			trace("video duration: " + meta.duration);		}		//--------------------------------------				private function netStatusHandler(event:NetStatusEvent):void 		{			try 			{				switch (event.info.code) 				{					case "NetStream.Play.Start" :					trace("_________play start");						// Debug Mode updates every new Video						if(Utils.toggleDebug) 							debug.drawMetaInfo(MetaDating.debugArray, playList, Utils.genre, Utils.idx, vidContainer);					break;										case "NetStream.Play.StreamNotFound" :						trace("_________not found");					break;										case "NetStream.Play.Stop" :						trace("_________next");						nextVid();						break;				}			} catch (error:TypeError) {				// Ignore any errors.				trace("_________error");			}		}		//--------------------------------------				private function killSound():void		{			//sound: soundMusic.stopSound();		}		//--------------------------------------				private function setVideo(videoX:int, videoY:int):void		{				vid.x = stage.stageWidth/2 - videoX/2;				vid.y = stage.stageHeight/2 - videoY/2;				vid.width = videoX;				vid.height = videoY;				vid2.x = stage.stageWidth/2 - videoX/2;				vid2.y = stage.stageHeight/2 - videoY/2;				vid2.width = videoX;				vid2.height = videoY;				vid3.x = stage.stageWidth/2 - videoX/2;				vid3.y = stage.stageHeight/2 - videoY/2;				vid3.width = videoX;				vid3.height = videoY;				vid4.x = stage.stageWidth/2 - videoX/2;				vid4.y = stage.stageHeight/2 - videoY/2;				vid4.width = videoX;				vid4.height = videoY;		}		//--------------------------------------		private function reloadVideo(e:MouseEvent):void		{			stopVideo();			dispatchEvent(new Event("reload button pressed"));			trace("reload button pressed");		}		//--------------------------------------/*		private function nextRound():void		{			stopVideo();			dispatchEvent(new Event("next round"));			trace("next round");		}*/		//--------------------------------------				private function standardVidSetup()		{			vid.x = 0;			vid.y = 0;			vid.width = 1280;			vid.height = 720;						vid2.x = 0;			vid2.y = 0;			vid2.width = 1280;			vid2.height = 720;						vid3.x = 0;			vid3.y = 0;			vid3.width = 1280;			vid3.height = 720;						vid4.x = 0;			vid4.y = 0;			vid4.width = 1280;			vid4.height = 720;		}		//--------------------------------------		private function fileNotFound(e:UtilEvent):void		{			trace("ERROR: file not found: " + checkFile.url);		}//--------------------------------------	}}