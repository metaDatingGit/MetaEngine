package {	import flash.display.*;	import flash.events.*;	import flash.media.Video;	import flash.system.Security;	import XMLload;	import Player;	import flash.text.*;	import flash.system.*;			//import Load_mc;	import flash.display.Stage;		// TIMER	import flash.utils.Timer;	import flash.events.TimerEvent;	public class MetaDating extends MovieClip	{		//--------------------------------------//  PRIVATE VARIABLES//--------------------------------------		private var xmlLoad:XMLload;		private var genreArr:Array = new Array();		private var playList:Array = new Array();		private var speechList:Array = new Array();		private var musicList:Array = new Array();		private	var control: Boolean = false;		private var player: Player;		public static var debugArray:Array;				private var project:ProjectCalc;			private var checkFile:FileLoaderUtils = new FileLoaderUtils();			private var _reload:Boolean;		private var genre:String;		private var notFound:int = 0;				//private var ld:Load_mc = new Load_mc ();		private static var XML_PATH:String = "xmls/";					public static var STAGE:Stage; //for global access		public static var ROOT:MovieClip; // for global access				//endscreen		public static var screen_endOfVideo:screenEndOfVideo = new screenEndOfVideo();		public static var bg_endscreen:bgEndscreen = new bgEndscreen();		public static var bg_startclip:bgStartclip = new bgStartclip();		public static var restart:Boolean = false				//TIMER		var myTimer:Timer = new Timer(Utils._time, 1);				//--------------------------------------//  CONSTRUCTOR//--------------------------------------				public function MetaDating()		{			stage.displayState = StageDisplayState.NORMAL;			stage.scaleMode = StageScaleMode.NO_SCALE;            //stage.align = StageAlign.TOP_LEFT;			Security.allowDomain("*");			init();		}		//--------------------------------------//  PRIVATE & PROTECTED INSTANCE METHODS//--------------------------------------		private function init ():void		{			xmlLoad = new XMLload ();			xmlLoad.addEventListener (LadEvent.XML_LOADED, loaded);			player = new Player ();			addChild (player);						checkFile.addEventListener(UtilEvent.FILE_NOT_FOUND, fileNotFound);			player.addEventListener("reload button pressed", reload);						//next round			player.addEventListener("next round", reload); 						bg_startclip.x = 0;			bg_startclip.y = 0;			bg_startclip.height = 720;			bg_startclip.width = 1280;			addChild(bg_startclip) //lade startbildschirm in bühne			bg_startclip.start_btn.addEventListener(MouseEvent.CLICK, initMetadating);						//reloads für endscreen:			screen_endOfVideo.btn_restart.addEventListener(MouseEvent.CLICK, reload);			trace("start!");		}		//--------------------------------------				private function checkFiles(arrList:Array)		{			for(var i:int = 0; i < arrList.length; i++)			{				checkFile.doesFileExist("media/" + Utils.genre + "/" + arrList[i]);			}		}		//--------------------------------------				private function keyHandler(event:KeyboardEvent):void		{			trace("ASCII Key Event: " + event.keyCode);			switch (event.keyCode)			{				case 82 : //Reload KeyCode R					player.stopVideo();					reload();				break;				case 88 : //Stop Video KeyCode X					trace("end");					player.killAllSound();					player.stopVideo();						break;				case 84 : //Test Video KeyCode T					trace("project");					xmlLoad.laden("xmls/project_name.xml");					Utils.genre = "project";								break;								// FOR DEBUG ONLY				case 39 : // keyCode RIGHT jump to next video in playList					player.nextVid();				break;				case 38: // keyCode UP repeat current vid from beginning					player.repeatVid();				break;				case 37 : // keyCode LEFT jump to previous video in playList					player.previousVid();				break;				case 68: // keyCode D					toggleDebug();				break;			}			//Utils.idx = 0; //play playlist array from beginning		}		//--------------------------------------				private function loaded(e:LadEvent):void		{			switch (Utils.genre)			{				case "project_name" : 					project = new ProjectCalc();					playList = project.calculateClips(e.xmlList);										trace(project.getAllClipNames);										//checkFiles(project.getAllClipNames); //files are checked in Player Class everytime before the clip plays. If you check more than 20 clips the program will crash (look for better solution in future than the FileLoader hack)					if(notFound < 1)						player.startVideo(playList);						else						trace("ERROR: missing files. Won't play");											debugArray = project.getMetaList;				break;							}		}		//--------------------------------------		private function reload(e:Event = null):void		{			switch (e.currentTarget.name)			{				case "btn_restart":					STAGE.removeChild(screen_endOfVideo);					STAGE.removeChild(bg_endscreen);					restart = true;			}						switch (Utils.genre)			{				case "project_name" :					xmlLoad.laden(XML_PATH + Utils.genre + ".xml");				break;			}			Utils.idx = 0; //play playlist array from beginning		}				//-------------------------------------						private function initMetadating(e:MouseEvent = null):void		{			switch(e.currentTarget.name)			{				case "start_btn":					removeChild(bg_startclip); //entferne wieder den startscreen (mit playbutton)					//starte Timer für 1,5 sek. für schwarzen screen am anfang					myTimer = new Timer(1500, 1);					myTimer.start();					myTimer.addEventListener(TimerEvent.TIMER, startMetadating);				break;			}		}		//--------------------------------------		private function startMetadating(e:TimerEvent):void	{		trace("start cgen");		Utils.genre = "project_name";		xmlLoad.laden(XML_PATH + Utils.genre + ".xml");		restart = false;	}//--------------------------------------				private function fileNotFound(e:UtilEvent):void		{		}		//--------------------------------------				private function toggleDebug(e:MouseEvent = null):void		{			if(!Utils.toggleDebug)			{				trace("debug activated");				Utils.toggleDebug = true;							}			else			{				trace("debug deactivated");				Utils.toggleDebug = false;			}					}		//--------------------------------------		private function showStartscreen(e:MouseEvent = null):void		{			addChild(bg_startclip);					STAGE.removeChild(screen_endOfVideo);					STAGE.removeChild(bg_endscreen);		}		//--------------------------------------		public static function endOfVideo():void		{			bg_endscreen.x = Player.vid.x;			bg_endscreen.y = Player.vid.y;			bg_endscreen.height = Player.vid.height;			bg_endscreen.width = Player.vid.width;			STAGE.addChild(bg_endscreen);						screen_endOfVideo.x = Player.vid.x;			screen_endOfVideo.y = Player.vid.y;			screen_endOfVideo.height = Player.vid.height;			screen_endOfVideo.width = Player.vid.width;			STAGE.addChild(screen_endOfVideo);		}	}}